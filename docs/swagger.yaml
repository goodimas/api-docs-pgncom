openapi: 3.0.3
info:
  title: PGNCOM API Documentation
  description: |
    Selamat datang di dokumentasi resmi API PGNCOM  
    PT PGAS Telekomunikasi Nusantara (PGNCOM)

    Dokumentasi ini menyediakan referensi lengkap untuk seluruh layanan API yang tersedia di lingkungan PGNCOM. API ini dirancang untuk mendukung berbagai kebutuhan integrasi aplikasi, automasi proses bisnis, pengelolaan data internal, serta pengembangan layanan digital yang terhubung secara aman dan efisien.

    Melalui koleksi API yang telah disediakan, Anda dapat mengakses berbagai layanan utama PGNCOM seperti:
    - Autentikasi pengguna.
    - Manajemen user dan approval.
    - Integrasi layanan email gateway.
    - Layanan referensi data negara, kota, dan organisasi.
    - Penyimpanan dan manajemen file melalui MinIO Storage.
    - Layanan presensi (Attendance).
    - Dan layanan lainnya yang terus berkembang.

    Dokumentasi ini juga menyertakan panduan penggunaan, parameter, dan contoh request-response untuk memudahkan developer dalam implementasi dan integrasi ke sistem yang ada.
  version: "1.0.0"

servers:
  - url: https://api.pgncom.co.id

paths:
  /api/login:
    post:
      summary: Login
      description: |
        Endpoint untuk login pengguna.  
        Header **harus** menyertakan:
        - `Content-Type: application/json`
        - `API_TOKEN: {API_TOKEN dari environment}`

        Setelah login berhasil, server akan mengembalikan token yang **disimpan oleh backend ke dalam HttpOnly Cookie**.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: yourpassword
              required:
                - email
                - password

      responses:
        '200':
          description: Login berhasil
          content:
            application/json:
              example:
                message: "Login success"
                token: "jwt_token_value"
        '401':
          description: Kredensial salah

      security: []

  /api/logout:
    post:
      summary: Logout
      description: |
        Endpoint untuk logout pengguna.  
        Header **harus** menyertakan:
        - `Content-Type: application/json`
        - `API_TOKEN: {API_TOKEN dari environment}`
        - `Authorization: Bearer {token dari login}`

        Token harus valid agar proses logout berhasil.

      responses:
        '200':
          description: Logout berhasil
          content:
            application/json:
              example:
                message: "Logout success"
        '401':
          description: Token tidak valid atau tidak ditemukan

      security:
        - bearerAuth: []

  /api/user:
    get:
      summary: Get All Users
      description: Mengambil semua data user tanpa filter.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      responses:
        '200':
          description: Daftar semua user
          content:
            application/json:
              example:
                - nopek: "0014830044"
                  name: "User A"
                  email: "usera@example.com"
                - nopek: "0014830045"
                  name: "User B"
                  email: "userb@example.com"
      security:
        - ApiKeyAuth: []

  /api/user/{nopek}:
    get:
      summary: Get User by Nopek
      description: Mengambil data user berdasarkan nomor pekerja (nopek).
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
        - in: path
          name: nopek
          required: true
          schema:
            type: string
          description: Nomor pekerja (nopek)
      responses:
        '200':
          description: Data user ditemukan
          content:
            application/json:
              example:
                nopek: "0014830044"
                name: "User A"
                email: "usera@example.com"
        '404':
          description: User tidak ditemukan
      security:
        - ApiKeyAuth: []

  /api/approval-user:
    get:
      summary: Get Approval User All
      description: Mengambil data approval semua user, termasuk informasi atasan dari layer paling rendah hingga tertinggi.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      responses:
        '200':
          description: Daftar approval user lengkap
          content:
            application/json:
              example:
                - user_nopek: "0014830044"
                  approvals:
                    - layer: 1
                      nopek: "0010000001"
                      name: "Atasan 1"
                    - layer: 2
                      nopek: "0010000002"
                      name: "Atasan 2"
        '401':
          description: Unauthorized
      security:
        - ApiKeyAuth: []

  /api/approval-user/{nopek}:
    get:
      summary: Get Approval User by Nopek
      description: Mengambil data approval user berdasarkan nomor pekerja (nopek).
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
        - in: path
          name: nopek
          required: true
          schema:
            type: string
          description: Nomor pekerja (nopek)
      responses:
        '200':
          description: Data approval user ditemukan
          content:
            application/json:
              example:
                user_nopek: "0014830044"
                approvals:
                  - layer: 1
                    nopek: "0010000001"
                    name: "Atasan 1"
                  - layer: 2
                    nopek: "0010000002"
                    name: "Atasan 2"
        '404':
          description: User tidak ditemukan
      security:
        - ApiKeyAuth: []

  /api/approval-user/{nopek}/{layers}:
    get:
      summary: Get Approval User by Nopek with Excluded Layers
      description: |
        Mengambil data approval user berdasarkan nomor pekerja (nopek) dengan mengecualikan layer tertentu.  
        Parameter `layers` bisa satu atau beberapa layer yang dipisahkan dengan `&`.  
        Contoh: `2&1` akan mengecualikan layer 2 dan 1.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
        - in: path
          name: nopek
          required: true
          schema:
            type: string
        - in: path
          name: layers
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Data approval user dengan layer tertentu dikecualikan
          content:
            application/json:
              example:
                user_nopek: "0014830044"
                excluded_layers: [1,2]
                approvals:
                  - layer: 3
                    nopek: "0010000003"
                    name: "Atasan 3"
        '404':
          description: User tidak ditemukan
      security:
        - ApiKeyAuth: []

  /api/approval/{layers}:
    get:
      summary: Get Approval User Except Certain Layers (All Users)
      description: |
        Mengambil data approval semua user dengan mengecualikan layer tertentu.  
        Parameter `layers` bisa satu atau beberapa layer yang dipisahkan dengan `&`.  
        Contoh: `1&2`
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
        - in: path
          name: layers
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Data approval semua user dengan layer tertentu dikecualikan
          content:
            application/json:
              example:
                excluded_layers: [1,2]
                users:
                  - user_nopek: "0014830044"
                    approvals:
                      - layer: 3
                        nopek: "0010000003"
                        name: "Atasan 3"
        '401':
          description: Unauthorized
      security:
        - ApiKeyAuth: []

  /api/mail-gateway:
    post:
      summary: Send Email via Mail Gateway
      description: |
        Endpoint untuk mengirim email menggunakan mail gateway PGNCOM.  
        Header **harus** menyertakan:
        - `Content-Type: application/json`
        - `API_TOKEN: {API_TOKEN dari environment}`
        - `Authorization: Bearer {token dari login}`
        - `APP_TOKEN_CURRENT_APP: {app_token aplikasi yang mengakses}`

        Field `from` biasanya menggunakan "noreply@pgncom.co.id" dan **tidak perlu diganti atau dicustom**.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                smtp_from:
                  type: string
                  example: noreply
                  description: SMTP sender identifier, biasanya "noreply"
                from:
                  type: string
                  example: noreply@pgncom.co.id
                  description: Alamat email pengirim, default noreply@pgncom.co.id
                from_name:
                  type: string
                  example: NOREPLY PGNCOM
                  description: Nama pengirim email
                to:
                  type: array
                  items:
                    type: string
                  example:
                    - dimas.aria@pgncom.co.id
                  description: Daftar email penerima utama
                cc:
                  type: array
                  items:
                    type: string
                  example: []
                  description: Daftar email penerima cc (carbon copy)
                bcc:
                  type: array
                  items:
                    type: string
                  example: []
                  description: Daftar email penerima bcc (blind carbon copy)
                subject:
                  type: string
                  example: Test dari Development
                  description: Subjek email
                mail_body:
                  type: string
                  example: "<h1>Pengumuman Bahwa Dokumen Segera Ditandatangani</h1><p>Semoga harimu menyenangkan.</p>"
                  description: Isi email dalam format HTML
                queue_delay:
                  type: integer
                  example: 5
                  description: Delay dalam antrian pengiriman email (dalam menit)

              required:
                - smtp_from
                - from
                - from_name
                - to
                - subject
                - mail_body
                - queue_delay

      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'

      responses:
        '200':
          description: Email berhasil dikirim atau masuk ke antrian pengiriman
          content:
            application/json:
              example:
                message: "Email queued successfully"
                queue_id: "1234567890"
        '400':
          description: Permintaan tidak valid (misalnya format email salah)
          content:
            application/json:
              example:
                error: "Invalid email format"
        '401':
          description: Token tidak valid atau tidak ditemukan
        '500':
          description: Kesalahan server saat memproses pengiriman email


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: API_TOKEN

  parameters:
    ContentType:
      name: Content-Type
      in: header
      required: true
      schema:
        type: string
        example: application/json

    Authorization:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
        example: Bearer {token}

    APIToken:
      name: API_TOKEN
      in: header
      required: true
      schema:
        type: string
        example: your_api_token

    AppToken:
      name: APP_TOKEN_CURRENT_APP
      in: header
      required: true
      schema:
        type: string
        example: your_app_token

security:
  - bearerAuth: []
  - ApiKeyAuth: []
