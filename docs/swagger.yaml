openapi: 3.0.3
info:
  title: PGNCOM API Documentation
  description: |
    Selamat datang di dokumentasi resmi API PGNCOM  
    PT PGAS Telekomunikasi Nusantara (PGNCOM)

    Dokumentasi ini menyediakan referensi lengkap untuk seluruh layanan API yang tersedia di lingkungan PGNCOM. API ini dirancang untuk mendukung berbagai kebutuhan integrasi aplikasi, automasi proses bisnis, pengelolaan data internal, serta pengembangan layanan digital yang terhubung secara aman dan efisien.

    Melalui koleksi API yang telah disediakan, Anda dapat mengakses berbagai layanan utama PGNCOM seperti:
    - Autentikasi pengguna.
    - Manajemen user dan approval.
    - Integrasi layanan email gateway.
    - Layanan referensi data negara, kota, dan organisasi.
    - Penyimpanan dan manajemen file melalui MinIO Storage.
    - Layanan presensi (Attendance).
    - Dan layanan lainnya yang terus berkembang.

    Dokumentasi ini juga menyertakan panduan penggunaan, parameter, dan contoh request-response untuk memudahkan developer dalam implementasi dan integrasi ke sistem yang ada.
  version: "1.0.0"

servers:
  - url: https://api.pgncom.co.id

paths:
  /api/login:
    post:
      tags:
        - Authentication
      summary: Login
      description: |
        Endpoint untuk login pengguna.  
        Header **harus** menyertakan:
        - `Content-Type: application/json`
        - `API_TOKEN: {API_TOKEN dari environment}`

        Setelah login berhasil, server akan mengembalikan token yang **disimpan oleh backend ke dalam HttpOnly Cookie**.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: yourpassword
              required:
                - email
                - password

      responses:
        '200':
          description: Login berhasil
          content:
            application/json:
              example:
                message: "Login success"
                token: "jwt_token_value"
        '401':
          description: Kredensial salah

      security: []

  /api/logout:
    post:
      tags:
        - Authentication
      summary: Logout
      description: |
        Endpoint untuk logout pengguna.  
        Header **harus** menyertakan:
        - `Content-Type: application/json`
        - `API_TOKEN: {API_TOKEN dari environment}`
        - `Authorization: Bearer {token dari login}`

        Token harus valid agar proses logout berhasil.

      responses:
        '200':
          description: Logout berhasil
          content:
            application/json:
              example:
                message: "Logout success"
        '401':
          description: Token tidak valid atau tidak ditemukan

      security:
        - bearerAuth: []

  /api/user:
    get:
      tags:
        - Users
      summary: Get All Users
      description: Mengambil semua data user tanpa filter.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      responses:
        '200':
          description: Daftar semua user
          content:
            application/json:
              example:
                - nopek: "0014830044"
                  name: "User A"
                  email: "usera@example.com"
                - nopek: "0014830045"
                  name: "User B"
                  email: "userb@example.com"
      security:
        - ApiKeyAuth: []

  /api/user/{nopek}:
    get:
      tags:
        - Users
      summary: Get User by Nopek
      description: Mengambil data user berdasarkan nomor pekerja (nopek).
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
        - in: path
          name: nopek
          required: true
          schema:
            type: string
          description: Nomor pekerja (nopek)
      responses:
        '200':
          description: Data user ditemukan
          content:
            application/json:
              example:
                nopek: "0014830044"
                name: "User A"
                email: "usera@example.com"
        '404':
          description: User tidak ditemukan
      security:
        - ApiKeyAuth: []

  /api/approval-user:
    get:
      tags:
        - Approval
      summary: Get Approval User All
      description: Mengambil data approval semua user, termasuk informasi atasan dari layer paling rendah hingga tertinggi.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      responses:
        '200':
          description: Daftar approval user lengkap
          content:
            application/json:
              example:
                - user_nopek: "0014830044"
                  approvals:
                    - layer: 1
                      nopek: "0010000001"
                      name: "Atasan 1"
                    - layer: 2
                      nopek: "0010000002"
                      name: "Atasan 2"
        '401':
          description: Unauthorized
      security:
        - ApiKeyAuth: []

  /api/approval-user/{nopek}:
    get:
      tags:
        - Approval
      summary: Get Approval User by Nopek
      description: Mengambil data approval user berdasarkan nomor pekerja (nopek).
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
        - in: path
          name: nopek
          required: true
          schema:
            type: string
          description: Nomor pekerja (nopek)
      responses:
        '200':
          description: Data approval user ditemukan
          content:
            application/json:
              example:
                user_nopek: "0014830044"
                approvals:
                  - layer: 1
                    nopek: "0010000001"
                    name: "Atasan 1"
                  - layer: 2
                    nopek: "0010000002"
                    name: "Atasan 2"
        '404':
          description: User tidak ditemukan
      security:
        - ApiKeyAuth: []

  /api/approval-user/{nopek}/{layers}:
    get:
      tags:
        - Approval
      summary: Get Approval User by Nopek with Excluded Layers
      description: |
        Mengambil data approval user berdasarkan nomor pekerja (nopek) dengan mengecualikan layer tertentu.  
        Parameter `layers` bisa satu atau beberapa layer yang dipisahkan dengan `&`.  
        Contoh: `2&1` akan mengecualikan layer 2 dan 1.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
        - in: path
          name: nopek
          required: true
          schema:
            type: string
        - in: path
          name: layers
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Data approval user dengan layer tertentu dikecualikan
          content:
            application/json:
              example:
                user_nopek: "0014830044"
                excluded_layers: [1,2]
                approvals:
                  - layer: 3
                    nopek: "0010000003"
                    name: "Atasan 3"
        '404':
          description: User tidak ditemukan
      security:
        - ApiKeyAuth: []

  /api/approval/{layers}:
    get:
      tags:
        - Approval
      summary: Get Approval User Except Certain Layers (All Users)
      description: |
        Mengambil data approval semua user dengan mengecualikan layer tertentu.  
        Parameter `layers` bisa satu atau beberapa layer yang dipisahkan dengan `&`.  
        Contoh: `1&2`
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
        - in: path
          name: layers
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Data approval semua user dengan layer tertentu dikecualikan
          content:
            application/json:
              example:
                excluded_layers: [1,2]
                users:
                  - user_nopek: "0014830044"
                    approvals:
                      - layer: 3
                        nopek: "0010000003"
                        name: "Atasan 3"
        '401':
          description: Unauthorized
      security:
        - ApiKeyAuth: []

  /api/mail-gateway:
    post:
      tags:
        - Email Gateway
      summary: Send Email via Mail Gateway
      description: |
        Endpoint untuk mengirim email menggunakan mail gateway PGNCOM.  
      

        Field `from` dan smtp_from tidak perlu diganti**.

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                smtp_from:
                  type: string
                  example: noreply
                  description: SMTP sender identifier, biasanya "noreply"
                from:
                  type: string
                  example: noreply@pgncom.co.id
                  description: Alamat email pengirim, default noreply@pgncom.co.id
                from_name:
                  type: string
                  example: NOREPLY PGNCOM
                  description: Nama pengirim email
                to:
                  type: array
                  items:
                    type: string
                  example:
                    - dimas.aria@pgncom.co.id
                  description: Daftar email penerima utama
                cc:
                  type: array
                  items:
                    type: string
                  example: []
                  description: Daftar email penerima cc (carbon copy)
                bcc:
                  type: array
                  items:
                    type: string
                  example: []
                  description: Daftar email penerima bcc (blind carbon copy)
                subject:
                  type: string
                  example: Test dari Development
                  description: Subjek email
                mail_body:
                  type: string
                  example: "<h1>Pengumuman Bahwa Dokumen Segera Ditandatangani</h1><p>Semoga harimu menyenangkan.</p>"
                  description: Isi email dalam format HTML
                queue_delay:
                  type: integer
                  example: 5
                  description: Delay dalam antrian pengiriman email (dalam menit)

              required:
                - smtp_from
                - from
                - from_name
                - to
                - subject
                - mail_body
                - queue_delay

      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'

      responses:
        '200':
          description: Email berhasil dikirim atau masuk ke antrian pengiriman
          content:
            application/json:
              example:
                message: "Email queued successfully"
                queue_id: "1234567890"
        '400':
          description: Permintaan tidak valid (misalnya format email salah)
          content:
            application/json:
              example:
                error: "Invalid email format"
        '401':
          description: Token tidak valid atau tidak ditemukan
        '500':
          description: Kesalahan server saat memproses pengiriman email

  /api/countries:
    get:
      tags:
        - Countries & Cities
      summary: Get All Countries
      description: Mengambil daftar semua negara.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      responses:
        '200':
          description: Daftar semua negara
          content:
            application/json:
              example:
                - country_id: 1
                  country_name: "Indonesia"
                - country_id: 2
                  country_name: "Malaysia"
      security:
        - ApiKeyAuth: []

  /api/province:
    get:
      tags:
        - Countries & Cities
      summary: Get All Provinces
      description: Mengambil daftar semua provinsi.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      responses:
        '200':
          description: Daftar semua provinsi
          content:
            application/json:
              example:
                - province_id: 11
                  province_name: "Jawa Barat"
                - province_id: 12
                  province_name: "Jawa Timur"
      security:
        - ApiKeyAuth: []

  /api/cities:
    get:
      tags:
        - Countries & Cities
      summary: Get All Cities
      description: Mengambil daftar semua kota/kabupaten.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      responses:
        '200':
          description: Daftar semua kota/kabupaten
          content:
            application/json:
              example:
                - city_id: 101
                  city_name: "Bandung"
                  province_id: 11
                - city_id: 102
                  city_name: "Surabaya"
                  province_id: 12
      security:
        - ApiKeyAuth: []

  /api/cities/{province_id}:
    get:
      tags:
        - Countries & Cities
      summary: Get Cities By Province ID
      description: Mengambil daftar kota/kabupaten berdasarkan ID provinsi.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
        - in: path
          name: province_id
          required: true
          schema:
            type: integer
          description: ID provinsi
      responses:
        '200':
          description: Daftar kota/kabupaten dalam provinsi
          content:
            application/json:
              example:
                - city_id: 101
                  city_name: "Bandung"
                  province_id: 11
                - city_id: 103
                  city_name: "Bogor"
                  province_id: 11
        '404':
          description: Provinsi tidak ditemukan
      security:
        - ApiKeyAuth: []
  /api/Organization:
    get:
      tags:
        - Organization & Branch
      summary: Get All Organizations
      description: Mengambil daftar semua organisasi.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      responses:
        '200':
          description: Daftar organisasi
          content:
            application/json:
              example:
                - organization_id: "org-001"
                  organization_name: "PT Contoh"
                - organization_id: "org-002"
                  organization_name: "CV Sample"
      security:
        - ApiKeyAuth: []

  /api/chart:
    get:
      tags:
        - Organization & Branch
      summary: Get Organizational Chart
      description: Mengambil data chart organisasi.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      responses:
        '200':
          description: Data chart organisasi
          content:
            application/json:
              example:
                chart_id: "chart-001"
                nodes:
                  - id: "node-1"
                    name: "CEO"
                  - id: "node-2"
                    name: "Manager"
      security:
        - ApiKeyAuth: []

  /api/branch/:
    get:
      tags:
        - Organization & Branch
      summary: Get All Branches
      description: Mengambil daftar semua cabang.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      responses:
        '200':
          description: Daftar cabang
          content:
            application/json:
              example:
                - branch_id: "973475dd-be13-4ed2-b192-dccef87178f8"
                  branch_name: "Cabang Jakarta"
                - branch_id: "a1234567-abcd-ef01-2345-6789abcdef01"
                  branch_name: "Cabang Surabaya"
      security:
        - ApiKeyAuth: []

  /api/branch/{uuid}:
    get:
      tags:
        - Organization & Branch
      summary: Get Branch by UUID
      description: Mengambil data cabang berdasarkan UUID.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
        - in: path
          name: uuid
          required: true
          schema:
            type: string
            format: uuid
          description: UUID cabang
      responses:
        '200':
          description: Data cabang
          content:
            application/json:
              example:
                branch_id: "973475dd-be13-4ed2-b192-dccef87178f8"
                branch_name: "Cabang Jakarta"
                address: "Jl. Merdeka No. 123"
        '404':
          description: Cabang tidak ditemukan
      security:
        - ApiKeyAuth: []

  /api/upload:
    post:
      summary: Upload Single File
      tags:
        - Object Storage
      description: Mengunggah satu file dengan validasi ukuran dan tipe MIME.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                maxsize:
                  type: integer
                  description: Ukuran maksimal file dalam KB
                mimeFile:
                  type: string
                  description: Format MIME file (contoh ; jpg, png, pdf)
                folderName:
                  type: string
                  description: Nama folder penyimpanan
                file:
                  type: string
                  format: binary
                  description: File yang diunggah
      responses:
        '200':
          description: File berhasil diunggah
      security:
        - ApiKeyAuth: []

  /api/UploadMultipleFiles:
    post:
      summary: Upload Multiple Files (Single Parameter)
      tags:
        - Object Storage
      description: Mengunggah banyak file dalam satu parameter (comma-separated).
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                maxsize:
                  type: integer
                mimeFile:
                  type: string
                folderName:
                  type: string
                file:
                  type: string
                  description: Nama file dipisahkan dengan koma (contoh; 1.jpg,2.png)
      responses:
        '200':
          description: File berhasil diunggah
      security:
        - ApiKeyAuth: []

  /api/UploadGroupedFiles:
    post:
      summary: Upload Multiple Files (Grouped Parameters)
      tags:
        - Object Storage
      description: Mengunggah banyak file dengan masing-masing parameter sendiri.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                maxsize:
                  type: array
                  items:
                    type: integer
                mimeFile:
                  type: array
                  items:
                    type: string
                folderName:
                  type: array
                  items:
                    type: string
                file:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '200':
          description: Semua file berhasil diunggah
      security:
        - ApiKeyAuth: []

  /api/viewFile:
    post:
      summary: View File
      tags:
        - Object Storage
      description: Melihat file tertentu berdasarkan folder dan nama file.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                app_folder:
                  type: string
                name_folder:
                  type: string
                file:
                  type: string
      responses:
        '200':
          description: File ditemukan
      security:
        - ApiKeyAuth: []

  /api/deleteFile:
    post:
      summary: Delete File
      tags:
        - Object Storage
      description: Menghapus file dari penyimpanan.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                app_folder:
                  type: string
                name_folder:
                  type: string
                file:
                  type: string
      responses:
        '200':
          description: File berhasil dihapus
      security:
        - ApiKeyAuth: []
  /api/getAttendance/{nopek}/{date}:
    get:
      summary: Get Attendance by NOPEK and Date
      tags:
        - Attendance
      description: |
        Endpoint ini digunakan untuk mengambil data kehadiran berdasarkan **NOPEK** dan **tanggal** tertentu.
        
        - Parameter `nopek` adalah nomor pegawai.
        - Parameter `date` menggunakan format YYYY-MM-DD.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
        - name: nopek
          in: path
          required: true
          description: Nomor pegawai (NOPEK)
          schema:
            type: string
            example: "001007832220"
        - name: date
          in: path
          required: true
          description: Tanggal absensi (format: YYYY-MM-DD)
          schema:
            type: string
            format: date
            example: "2025-05-15"
      responses:
        '200':
          description: Data kehadiran ditemukan
      security:
        - ApiKeyAuth: []

  /api/checkin-out:
    post:
      summary: Check-In / Check-Out Attendance
      tags:
        - Attendance
      description: >
        Endpoint untuk melakukan check-in atau check-out kehadiran.
        File/foto hanya akan disimpan **nama filenya saja** di database, dan disarankan
        diunggah menggunakan endpoint upload yang tersedia di tag Object Storage.
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ClientType
                - TagNo
                - ReaderNo
                - device_id
                - location
                - file
                - Checktype
                - created_by
              properties:
                ClientType:
                  type: integer
                  example: 101
                  description: Jenis client (contoh; 101 untuk Android)
                TagNo:
                  type: string
                  example: "2068977335"
                  description: Nomor Tag RFID
                ReaderNo:
                  type: integer
                  example: 1
                  description: Nomor reader device
                device_id:
                  type: string
                  example: "UHF-Reader-1"
                  description: ID unik perangkat pembaca
                location:
                  type: string
                  example: "Gate-1"
                  description: Lokasi pembaca RFID
                file:
                  type: string
                  example: "photo.jpg"
                  description: Nama file atau foto yang telah diunggah ke object storage
                Checktype:
                  type: string
                  enum: [IN, OUT]
                  example: "IN"
                  description: Jenis check (IN untuk masuk, OUT untuk keluar)
                created_by:
                  type: string
                  example: "Android"
                  description: Sumber atau platform yang membuat data ini
      responses:
        '200':
          description: Check-in/out berhasil dicatat
      security:
        - ApiKeyAuth: []


  /api/module/:
    get:
      summary: Get All Modules
      tags:
        - Module
      description: Mendapatkan semua data module yang terdaftar
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      responses:
        '200':
          description: Data module berhasil diambil
      security:
        - ApiKeyAuth: []

  /api/createModule/:
    post:
      summary: Create New Module
      tags:
        - Module
      description: Menambahkan module baru ke sistem
      parameters:
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - app_key
                - title_name
                - title_code
                - module_name
                - module_url
                - access_by
                - status
              properties:
                app_key:
                  type: string
                  example: "xxxxx"
                title_name:
                  type: string
                  example: "Dashboard"
                title_code:
                  type: string
                  example: "T001"
                module_name:
                  type: string
                  example: "User Management"
                module_url:
                  type: string
                  example: "/users"
                access_by:
                  type: string
                  example: "admin"
                status:
                  type: string
                  example: "actived"
      responses:
        '201':
          description: Module berhasil ditambahkan
      security:
        - ApiKeyAuth: []

  /api/updateModule/{module_id}:
    put:
      summary: Update Existing Module
      tags:
        - Module
      description: Memperbarui data module yang sudah ada
      parameters:
        - name: module_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "875f90c7-b492-47ed-a875-73aa108e35bc"
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                app_key:
                  type: string
                  example: "xxxxx"
                title_name:
                  type: string
                  example: "Dashboard"
                title_code:
                  type: string
                  example: "T001"
                module_name:
                  type: string
                  example: "User Management"
                module_url:
                  type: string
                  example: "/users"
                access_by:
                  type: string
                  example: "admin"
                status:
                  type: string
                  example: "actived"
      responses:
        '200':
          description: Module berhasil diperbarui
      security:
        - ApiKeyAuth: []

  /api/deleteModule/{module_id}:
    delete:
      summary: Delete Module
      tags:
        - Module
      description: Menghapus module dari sistem berdasarkan UUID
      parameters:
        - name: module_id
          in: path
          required: true
          schema:
            type: string
            format: uuid
          example: "875f90c7-b492-47ed-a875-73aa108e35bc"
        - $ref: '#/components/parameters/ContentType'
        - $ref: '#/components/parameters/Authorization'
        - $ref: '#/components/parameters/APIToken'
        - $ref: '#/components/parameters/AppToken'
      responses:
        '200':
          description: Module berhasil dihapus
      security:
        - ApiKeyAuth: []


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    ApiKeyAuth:
      type: apiKey
      in: header
      name: API_TOKEN

  parameters:
    ContentType:
      name: Content-Type
      in: header
      required: true
      schema:
        type: string
        example: application/json

    Authorization:
      name: Authorization
      in: header
      required: true
      schema:
        type: string
        example: Bearer {token}

    APIToken:
      name: API_TOKEN
      in: header
      required: true
      schema:
        type: string
        example: your_api_token

    AppToken:
      name: APP_TOKEN_CURRENT_APP
      in: header
      required: true
      schema:
        type: string
        example: your_app_token

security:
  - bearerAuth: []
  - ApiKeyAuth: []
